{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 336, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/apple-mail.ts"],"sourcesContent":["/**\n * Represents an email.\n */\nexport interface Email {\n  /**\n   * The ID of the email.\n   */\nid: string;\n  /**\n   * The sender of the email.\n   */\nsender: string;\n  /**\n   * The subject of the email.\n   */\n  subject: string;\n  /**\n   * The body of the email.\n   */\n  body: string;\n}\n\n/**\n * Asynchronously retrieves emails for a user.\n *\n * @param userId The ID of the user.\n * @returns A promise that resolves to an array of Email objects.\n */\nexport async function getAppleEmails(userId: string): Promise<Email[]> {\n  // TODO: Implement this by calling an API.\n\n  return [\n    {\n      id: '13',\n      sender: 'Tom@example.com',\n      subject: 'New Apple Email',\n      body: 'Please review the latest Apple email.',\n    },\n    {\n      id: '14',\n      sender: 'Amy@example.com',\n      subject: 'Apple Meeting',\n      body: 'Reminder for the upcoming Apple meeting.',\n    },\n  ];\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AA0BM,eAAe,eAAe,MAAc;IACjD,0CAA0C;IAE1C,OAAO;QACL;YACE,IAAI;YACJ,QAAQ;YACR,SAAS;YACT,MAAM;QACR;QACA;YACE,IAAI;YACJ,QAAQ;YACR,SAAS;YACT,MAAM;QACR;KACD;AACH","debugId":null}},
    {"offset": {"line": 364, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/microsoft-outlook.ts"],"sourcesContent":["/**\n * Represents an email.\n */\nexport interface Email {\n  /**\n   * The ID of the email.\n   */\nid: string;\n  /**\n   * The sender of the email.\n   */\nsender: string;\n  /**\n   * The subject of the email.\n   */\n  subject: string;\n  /**\n   * The body of the email.\n   */\n  body: string;\n}\n\n/**\n * Asynchronously retrieves emails for a user.\n *\n * @param userId The ID of the user.\n * @returns A promise that resolves to an array of Email objects.\n */\nexport async function getOutlookEmails(userId: string): Promise<Email[]> {\n  // TODO: Implement this by calling an API.\n\n  return [\n    {\n      id: '11',\n      sender: 'Bob@example.com',\n      subject: 'New Outlook Email',\n      body: 'Please review the latest Outlook email.',\n    },\n    {\n      id: '12',\n      sender: 'Sally@example.com',\n      subject: 'Outlook Meeting',\n      body: 'Reminder for the upcoming Outlook meeting.',\n    },\n  ];\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AA0BM,eAAe,iBAAiB,MAAc;IACnD,0CAA0C;IAE1C,OAAO;QACL;YACE,IAAI;YACJ,QAAQ;YACR,SAAS;YACT,MAAM;QACR;QACA;YACE,IAAI;YACJ,QAAQ;YACR,SAAS;YACT,MAAM;QACR;KACD;AACH","debugId":null}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/gmail.ts"],"sourcesContent":["/**\n * Represents an email.\n */\nexport interface Email {\n  /**\n   * The ID of the email.\n   */\nid: string;\n  /**\n   * The sender of the email.\n   */\nsender: string;\n  /**\n   * The subject of the email.\n   */\n  subject: string;\n  /**\n   * The body of the email.\n   */\n  body: string;\n}\n\n/**\n * Asynchronously retrieves emails for a user.\n *\n * @param userId The ID of the user.\n * @returns A promise that resolves to an array of Email objects.\n */\nexport async function getEmails(userId: string): Promise<Email[]> {\n  // TODO: Implement this by calling an API.\n\n  return [\n    {\n      id: '9',\n      sender: 'john@example.com',\n      subject: 'Project Update',\n      body: 'Please review the latest project update.',\n    },\n    {\n      id: '10',\n      sender: 'jane@example.com',\n      subject: 'Meeting Reminder',\n      body: 'Reminder for the upcoming meeting.',\n    },\n  ];\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AA0BM,eAAe,UAAU,MAAc;IAC5C,0CAA0C;IAE1C,OAAO;QACL;YACE,IAAI;YACJ,QAAQ;YACR,SAAS;YACT,MAAM;QACR;QACA;YACE,IAAI;YACJ,QAAQ;YACR,SAAS;YACT,MAAM;QACR;KACD;AACH","debugId":null}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/dropbox.ts"],"sourcesContent":["/**\n * Represents a file in Dropbox.\n */\nexport interface DropboxFile {\n  /**\n   * The ID of the file.\n   */\nid: string;\n  /**\n   * The name of the file.\n   */\nname: string;\n  /**\n   * The path to the file.\n   */\n  path: string;\n}\n\n/**\n * Asynchronously retrieves files from Dropbox for a user.\n *\n * @param userId The ID of the user.\n * @returns A promise that resolves to an array of DropboxFile objects.\n */\nexport async function getDropboxFiles(userId: string): Promise<DropboxFile[]> {\n  // TODO: Implement this by calling an API.\n\n  return [\n    {\n      id: '7',\n      name: 'Document1.pdf',\n      path: '/Documents/Document1.pdf',\n    },\n    {\n      id: '8',\n      name: 'Image2.jpg',\n      path: '/Images/Image2.jpg',\n    },\n  ];\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AAsBM,eAAe,gBAAgB,MAAc;IAClD,0CAA0C;IAE1C,OAAO;QACL;YACE,IAAI;YACJ,MAAM;YACN,MAAM;QACR;QACA;YACE,IAAI;YACJ,MAAM;YACN,MAAM;QACR;KACD;AACH","debugId":null}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/apple-calendar.ts"],"sourcesContent":["/**\n * Represents a calendar event.\n */\nexport interface CalendarEvent {\n  /**\n   * The ID of the event.\n   */\nid: string;\n  /**\n   * The title of the event.\n   */\ntitle: string;\n  /**\n   * The start time of the event.\n   */\n  startTime: Date;\n  /**\n   * The end time of the event.\n   */\n  endTime: Date;\n}\n\n/**\n * Asynchronously retrieves calendar events for a user.\n *\n * @param userId The ID of the user.\n * @returns A promise that resolves to an array of CalendarEvent objects.\n */\nexport async function getAppleCalendarEvents(userId: string): Promise<CalendarEvent[]> {\n  // TODO: Implement this by calling an API.\n\n  return [\n    {\n      id: '5',\n      title: 'Appointment with Doctor',\n      startTime: new Date(),\n      endTime: new Date(),\n    },\n    {\n      id: '6',\n      title: 'Party',\n      startTime: new Date(),\n      endTime: new Date(),\n    },\n  ];\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AA0BM,eAAe,uBAAuB,MAAc;IACzD,0CAA0C;IAE1C,OAAO;QACL;YACE,IAAI;YACJ,OAAO;YACP,WAAW,IAAI;YACf,SAAS,IAAI;QACf;QACA;YACE,IAAI;YACJ,OAAO;YACP,WAAW,IAAI;YACf,SAAS,IAAI;QACf;KACD;AACH","debugId":null}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/microsoft-calendar.ts"],"sourcesContent":["/**\n * Represents a calendar event.\n */\nexport interface CalendarEvent {\n  /**\n   * The ID of the event.\n   */\nid: string;\n  /**\n   * The title of the event.\n   */\ntitle: string;\n  /**\n   * The start time of the event.\n   */\n  startTime: Date;\n  /**\n   * The end time of the event.\n   */\n  endTime: Date;\n}\n\n/**\n * Asynchronously retrieves calendar events for a user.\n *\n * @param userId The ID of the user.\n * @returns A promise that resolves to an array of CalendarEvent objects.\n */\nexport async function getMicrosoftCalendarEvents(userId: string): Promise<CalendarEvent[]> {\n  // TODO: Implement this by calling an API.\n\n  return [\n    {\n      id: '3',\n      title: 'Meeting with Jane',\n      startTime: new Date(),\n      endTime: new Date(),\n    },\n    {\n      id: '4',\n      title: 'Hackathon',\n      startTime: new Date(),\n      endTime: new Date(),\n    },\n  ];\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AA0BM,eAAe,2BAA2B,MAAc;IAC7D,0CAA0C;IAE1C,OAAO;QACL;YACE,IAAI;YACJ,OAAO;YACP,WAAW,IAAI;YACf,SAAS,IAAI;QACf;QACA;YACE,IAAI;YACJ,OAAO;YACP,WAAW,IAAI;YACf,SAAS,IAAI;QACf;KACD;AACH","debugId":null}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/google-calendar.ts"],"sourcesContent":["/**\n * Represents a calendar event.\n */\nexport interface CalendarEvent {\n  /**\n   * The ID of the event.\n   */\nid: string;\n  /**\n   * The title of the event.\n   */\ntitle: string;\n  /**\n   * The start time of the event.\n   */\n  startTime: Date;\n  /**\n   * The end time of the event.\n   */\n  endTime: Date;\n}\n\n/**\n * Asynchronously retrieves calendar events for a user.\n *\n * @param userId The ID of the user.\n * @returns A promise that resolves to an array of CalendarEvent objects.\n */\nexport async function getCalendarEvents(userId: string): Promise<CalendarEvent[]> {\n  // TODO: Implement this by calling an API.\n\n  return [\n    {\n      id: '1',\n      title: 'Meeting with John',\n      startTime: new Date(),\n      endTime: new Date(),\n    },\n    {\n      id: '2',\n      title: 'Team Lunch',\n      startTime: new Date(),\n      endTime: new Date(),\n    },\n  ];\n}\n"],"names":[],"mappings":"AAAA;;CAEC;;;AA0BM,eAAe,kBAAkB,MAAc;IACpD,0CAA0C;IAE1C,OAAO;QACL;YACE,IAAI;YACJ,OAAO;YACP,WAAW,IAAI;YACf,SAAS,IAAI;QACf;QACA;YACE,IAAI;YACJ,OAAO;YACP,WAAW,IAAI;YACf,SAAS,IAAI;QACf;KACD;AACH","debugId":null}},
    {"offset": {"line": 530, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/ai-quick-search.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview AI Quick Search flow for administrators.\n *\n * - aiQuickSearch - A function that handles the AI quick search process.\n * - AiQuickSearchInput - The input type for the aiQuickSearch function.\n * - AiQuickSearchOutput - The return type for the aiQuickSearch function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\nimport {getAppleEmails, Email as AppleEmail} from '@/services/apple-mail';\nimport {getOutlookEmails, Email as OutlookEmail} from '@/services/microsoft-outlook';\nimport {getEmails, Email as GmailEmail} from '@/services/gmail';\nimport {getDropboxFiles, DropboxFile} from '@/services/dropbox';\nimport {getAppleCalendarEvents, CalendarEvent as AppleCalendarEvent} from '@/services/apple-calendar';\nimport {getMicrosoftCalendarEvents, CalendarEvent as MicrosoftCalendarEvent} from '@/services/microsoft-calendar';\nimport {getCalendarEvents, CalendarEvent as GoogleCalendarEvent} from '@/services/google-calendar';\n\nconst AiQuickSearchInputSchema = z.object({\n  userId: z.string().describe('The ID of the user performing the search.'),\n  query: z.string().describe('The search query.'),\n});\nexport type AiQuickSearchInput = z.infer<typeof AiQuickSearchInputSchema>;\n\nconst AiQuickSearchOutputSchema = z.object({\n  results: z.array(z.object({\n    type: z.string().describe('The type of the result (email, document, task, calendar event).'),\n    source: z.string().describe('The source of the result (e.g., Gmail, Dropbox, CollabFlow).'),\n    title: z.string().describe('The title of the result.'),\n    description: z.string().describe('A short description of the result.'),\n    link: z.string().describe('A link to the full result within CollabFlow.'),\n  })).describe('The search results.'),\n});\nexport type AiQuickSearchOutput = z.infer<typeof AiQuickSearchOutputSchema>;\n\nexport async function aiQuickSearch(input: AiQuickSearchInput): Promise<AiQuickSearchOutput> {\n  return aiQuickSearchFlow(input);\n}\n\nconst searchPrompt = ai.definePrompt({\n  name: 'aiQuickSearchPrompt',\n  input: {\n    schema: z.object({\n      query: z.string().describe('The search query.'),\n      emails: z.array(z.object({\n        id: z.string(),\n        sender: z.string(),\n        subject: z.string(),\n        body: z.string(),\n      })).describe('A list of emails to search through.'),\n      dropboxFiles: z.array(z.object({\n        id: z.string(),\n        name: z.string(),\n        path: z.string(),\n      })).describe('A list of Dropbox files to search through.'),\n      calendarEvents: z.array(z.object({\n        id: z.string(),\n        title: z.string(),\n        startTime: z.date(),\n        endTime: z.date(),\n      })).describe('A list of calendar events to search through.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      results: z.array(z.object({\n        type: z.string().describe('The type of the result (email, document, task, calendar event).'),\n        source: z.string().describe('The source of the result (e.g., Gmail, Dropbox, CollabFlow).'),\n        title: z.string().describe('The title of the result.'),\n        description: z.string().describe('A short description of the result.'),\n        link: z.string().describe('A link to the full result within CollabFlow.'),\n      })).describe('The search results.'),\n    }),\n  },\n  prompt: `You are an AI assistant helping an administrator find information across different sources.\n\n  The administrator is looking for: {{{query}}}\n\n  Here are some emails:\n  {{#each emails}}\n  - Sender: {{{sender}}}, Subject: {{{subject}}}, Body: {{{body}}}\n  {{/each}}\n\n  Here are some Dropbox files:\n  {{#each dropboxFiles}}\n  - Name: {{{name}}}, Path: {{{path}}}\n  {{/each}}\n\n  Here are some calendar events:\n  {{#each calendarEvents}}\n  - Title: {{{title}}}, Start Time: {{{startTime}}}, End Time: {{{endTime}}}\n  {{/each}}\n\n  Based on the information provided, find the most relevant results and provide a short description and a link to the full result within CollabFlow.\n  Ensure that the results are relevant to the query. For each result, describe the type, source, title, description and link.\n\n  Results should be formatted as a JSON array of objects like this:\n  {\n    \"results\": [\n      {\n        \"type\": \"email\",\n        \"source\": \"Gmail\",\n        \"title\": \"Project Update\",\n        \"description\": \"An email from John about the latest project update.\",\n        \"link\": \"/email/123\"\n      }\n    ]\n  }\n  `,\n});\n\nconst aiQuickSearchFlow = ai.defineFlow<\n  typeof AiQuickSearchInputSchema,\n  typeof AiQuickSearchOutputSchema\n>({\n  name: 'aiQuickSearchFlow',\n  inputSchema: AiQuickSearchInputSchema,\n  outputSchema: AiQuickSearchOutputSchema,\n}, async input => {\n  const gmailEmails: GmailEmail[] = await getEmails(input.userId);\n  const outlookEmails: OutlookEmail[] = await getOutlookEmails(input.userId);\n  const appleEmails: AppleEmail[] = await getAppleEmails(input.userId);\n  const allEmails = [...gmailEmails, ...outlookEmails, ...appleEmails];\n\n  const dropboxFiles: DropboxFile[] = await getDropboxFiles(input.userId);\n\n  const googleCalendarEvents: GoogleCalendarEvent[] = await getCalendarEvents(input.userId);\n  const microsoftCalendarEvents: MicrosoftCalendarEvent[] = await getMicrosoftCalendarEvents(input.userId);\n  const appleCalendarEvents: AppleCalendarEvent[] = await getAppleCalendarEvents(input.userId);\n  const allCalendarEvents = [...googleCalendarEvents, ...microsoftCalendarEvents, ...appleCalendarEvents];\n\n  const {output} = await searchPrompt({\n    query: input.query,\n    emails: allEmails,\n    dropboxFiles: dropboxFiles,\n    calendarEvents: allCalendarEvents,\n  });\n  return output!;\n});\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 691, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/ai-project-assistant.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview AI Project Assistant Flow for summarizing project progress, risks, and next steps.\n *\n * - aiProjectSummary - A function that generates a project summary.\n * - AIProjectSummaryInput - The input type for the aiProjectSummary function.\n * - AIProjectSummaryOutput - The return type for the aiProjectSummary function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\nimport {getCalendarEvents} from '@/services/google-calendar';\nimport {getMicrosoftCalendarEvents} from '@/services/microsoft-calendar';\nimport {getAppleCalendarEvents} from '@/services/apple-calendar';\nimport {getDropboxFiles} from '@/services/dropbox';\nimport {getEmails} from '@/services/gmail';\nimport {getOutlookEmails} from '@/services/microsoft-outlook';\nimport {getAppleEmails} from '@/services/apple-mail';\n\nconst AIProjectSummaryInputSchema = z.object({\n  projectId: z.string().describe('The ID of the project to summarize.'),\n  userId: z.string().describe('The ID of the user requesting the summary.'),\n});\nexport type AIProjectSummaryInput = z.infer<typeof AIProjectSummaryInputSchema>;\n\nconst AIProjectSummaryOutputSchema = z.object({\n  summary: z.string().describe('A summary of the project progress, key risks, and next steps.'),\n});\nexport type AIProjectSummaryOutput = z.infer<typeof AIProjectSummaryOutputSchema>;\n\nexport async function aiProjectSummary(input: AIProjectSummaryInput): Promise<AIProjectSummaryOutput> {\n  return aiProjectSummaryFlow(input);\n}\n\nconst aiProjectSummaryPrompt = ai.definePrompt({\n  name: 'aiProjectSummaryPrompt',\n  input: {\n    schema: z.object({\n      projectId: z.string().describe('The ID of the project to summarize.'),\n      userId: z.string().describe('The ID of the user requesting the summary.'),\n      tasks: z.string().describe('A list of task names.'),\n      emails: z.string().describe('A list of email subjects.'),\n      documents: z.string().describe('A list of document names.'),\n      calendarEvents: z.string().describe('A list of calendar event titles.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      summary: z.string().describe('A summary of the project progress, key risks, and next steps.'),\n    }),\n  },\n  prompt: `You are an AI Project Assistant, and will produce a summary of the project progress, key risks, and next steps, from this information:\n\nProject ID: {{{projectId}}}\nUser ID: {{{userId}}}\nTasks: {{{tasks}}}\nEmails: {{{emails}}}\nDocuments: {{{documents}}}\nCalendar Events: {{{calendarEvents}}}\n\nAnalyze the provided data and generate a concise summary (approximately 150-200 words) that covers the following:\n\n1.  Project Progress: Briefly describe the current status of the project, highlighting completed tasks and ongoing activities.\n2.  Key Risks: Identify any potential risks or challenges that could impact the project timeline or success.\n3.  Next Steps: Outline the immediate actions and priorities required to keep the project on track.`,\n});\n\nconst aiProjectSummaryFlow = ai.defineFlow<\n  typeof AIProjectSummaryInputSchema,\n  typeof AIProjectSummaryOutputSchema\n>(\n  {\n    name: 'aiProjectSummaryFlow',\n    inputSchema: AIProjectSummaryInputSchema,\n    outputSchema: AIProjectSummaryOutputSchema,\n  },\n  async input => {\n    // Fetch relevant data for the project\n    const tasks = ['Task 1', 'Task 2', 'Task 3']; // Replace with actual task retrieval\n    const emails = (await getEmails(input.userId)).map(email => email.subject);\n    const outlookEmails = (await getOutlookEmails(input.userId)).map(email => email.subject);\n    const appleEmails = (await getAppleEmails(input.userId)).map(email => email.subject);\n    const documents = (await getDropboxFiles(input.userId)).map(file => file.name);\n    const calendarEvents = (await getCalendarEvents(input.userId)).map(event => event.title);\n    const microsoftCalendarEvents = (await getMicrosoftCalendarEvents(input.userId)).map(event => event.title);\n    const appleCalendarEvents = (await getAppleCalendarEvents(input.userId)).map(event => event.title);\n\n    const {\n      output,\n    } = await aiProjectSummaryPrompt({\n      ...input,\n      tasks: tasks.join(', '),\n      emails: [...emails, ...outlookEmails, ...appleEmails].join(', '),\n      documents: documents.join(', '),\n      calendarEvents: [...calendarEvents, ...microsoftCalendarEvents, ...appleCalendarEvents].join(', '),\n    });\n    return output!;\n  }\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 812, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["'use server';\n\nimport {Card, CardContent, CardDescription, CardHeader, CardTitle} from '@/components/ui/card';\nimport {aiQuickSearch} from '@/ai/flows/ai-quick-search';\nimport {aiProjectSummary} from '@/ai/flows/ai-project-assistant';\n\nasync function getQuickSearchResults(userId: string, query: string) {\n  try {\n    const results = await aiQuickSearch({ userId: userId, query: query });\n    return results?.results || [];\n  } catch (error) {\n    console.error(\"Error fetching quick search results:\", error);\n    return [];\n  }\n}\n\nasync function getProjectSummary(userId: string, projectId: string) {\n  try {\n    const summary = await aiProjectSummary({ userId: userId, projectId: projectId });\n    return summary?.summary || 'No summary available.';\n  } catch (error) {\n    console.error(\"Error fetching project summary:\", error);\n    return 'Failed to load project summary.';\n  }\n}\n\nexport default async function Home() {\n  const userId = 'user123'; // Replace with actual user ID\n  const projectId = 'project456'; // Replace with actual project ID\n  const searchQuery = 'urgent updates';\n\n  const quickSearchResults = await getQuickSearchResults(userId, searchQuery);\n  const projectSummary = await getProjectSummary(userId, projectId);\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <aside className=\"w-64 bg-secondary border-r p-4\">\n        <ul>\n          <li>\n            <a href=\"#\" className=\"block py-2 hover:bg-accent rounded-md p-2\">\n              Dashboard\n            </a>\n          </li>\n          <li>\n            <a href=\"#\" className=\"block py-2 hover:bg-accent rounded-md p-2\">\n              Projects\n            </a>\n          </li>\n          <li>\n            <a href=\"#\" className=\"block py-2 hover:bg-accent rounded-md p-2\">\n              Tasks\n            </a>\n          </li>\n          {/* Add more navigation items here */}\n        </ul>\n      </aside>\n      <main className=\"flex-1 p-4\">\n        <div className=\"grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3\">\n\n          {/* AI Quick Search Results Widget */}\n          <Card>\n            <CardHeader>\n              <CardTitle>AI Quick Search Results</CardTitle>\n              <CardDescription>Results for: {searchQuery}</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {quickSearchResults.length > 0 ? (\n                <ul>\n                  {quickSearchResults.map((result, index) => (\n                    <li key={index} className=\"mb-2\">\n                      <strong>{result.title}</strong> - {result.description} ({result.source})\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <p>No results found.</p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* AI Project Summary Widget */}\n          <Card>\n            <CardHeader>\n              <CardTitle>AI Project Summary</CardTitle>\n              <CardDescription>Summary for Project ID: {projectId}</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>{projectSummary}</p>\n            </CardContent>\n          </Card>\n\n          {/* Placeholder Widgets - Example Data */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Tasks Overview</CardTitle>\n              <CardDescription>Current tasks status</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>Total Tasks: 20</p>\n              <p>Completed: 15</p>\n              <p>Pending: 5</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Calendar Events</CardTitle>\n              <CardDescription>Upcoming events</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>Meeting with John - Today, 2:00 PM</p>\n              <p>Team Lunch - Tomorrow, 12:00 PM</p>\n            </CardContent>\n          </Card>\n\n          {/* Add more widgets here as needed */}\n        </div>\n      </main>\n    </div>\n  );\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1184, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}